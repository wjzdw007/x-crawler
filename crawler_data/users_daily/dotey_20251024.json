{
  "user": {
    "screen_name": "dotey",
    "name": "",
    "description": "",
    "followers_count": 0,
    "verified": false,
    "is_blue_verified": false
  },
  "date": "20251024",
  "last_updated": "2025-10-31T01:37:27.577813",
  "tweet_count": 22,
  "tweets": [
    {
      "id": "1981568206918873122",
      "text": "我发什么不需要有人来教育，已拉黑 https://t.co/bUh6f6y3DU",
      "created_at": "Fri Oct 24 03:47:30 +0000 2025",
      "lang": "zh",
      "media": [
        {
          "type": "photo",
          "id": "1981568099905044480",
          "url": "https://pbs.twimg.com/media/G3_xsCUWAAAVuCZ.jpg"
        }
      ],
      "retweet": null,
      "quoted": null,
      "stats": {
        "retweet_count": 4,
        "favorite_count": 255,
        "reply_count": 42,
        "quote_count": 2
      }
    },
    {
      "id": "1981584580969648408",
      "text": "我觉得看你定位，如果你只是想做产品经理，或者就是想做老板，只要实现从 0 - 1，未来 1 - 100 有团队帮你一起完成，那足够了。\n\n如果你定位自己是一个程序员，未来还想继续从事软件开发这一行，对底层技术了解还是必须的，真把 AI 生成的结果当个黑盒子不管实现，出问题时还是很麻烦的，没点技术基础还是挺难搞清楚。\n\n而懂技术而不是依赖 AI 这恰恰也是未来的核心竞争力，因为现在 AI 让新手在技术上精进反而更难了，依赖性也更强了。",
      "created_at": "Fri Oct 24 04:52:34 +0000 2025",
      "lang": "zh",
      "media": [],
      "retweet": null,
      "quoted": {
        "id": "1981583155086889384",
        "text": "@dotey 最近开始高强度使用 cc，越来越觉得这种程度的 llm，我只需要把整体框架、索引写清楚，业务的底层逻辑只需要他自行处理，就更像是懂技术的产品经理了（项目规模不大）。现在想换公司不知道简历写啥好了😅，不知道宝玉老师现在是怎样的看法",
        "created_at": "Fri Oct 24 04:46:54 +0000 2025",
        "lang": "zh",
        "media": [],
        "retweet": null,
        "quoted": null,
        "user": {
          "id": "2851869019",
          "name": "Quinn Xen",
          "screen_name": "quest_xen",
          "description": "",
          "followers_count": 19,
          "friends_count": 167,
          "verified": false,
          "is_blue_verified": false
        },
        "stats": {
          "retweet_count": 0,
          "favorite_count": 8,
          "reply_count": 0,
          "quote_count": 2
        }
      },
      "stats": {
        "retweet_count": 10,
        "favorite_count": 73,
        "reply_count": 6,
        "quote_count": 1
      }
    },
    {
      "id": "1981584807495909852",
      "text": "Gemini 还真做不到，因为它不操作网页，只把网页当上下文，而这需要 AI 去操作网页，比如滚动、点开评论\nhttps://t.co/Op6Ogh2A0v",
      "created_at": "Fri Oct 24 04:53:28 +0000 2025",
      "lang": "zh",
      "media": [],
      "retweet": null,
      "quoted": {
        "id": "1981583724061110493",
        "text": "@dotey 这个功能 gemini for chrome 就能做到吧，让gemini识别页面的内容，不知道为什么chrome团队一点也不宣传",
        "created_at": "Fri Oct 24 04:49:10 +0000 2025",
        "lang": "zh",
        "media": [],
        "retweet": null,
        "quoted": null,
        "user": {
          "id": "1913415350538137600",
          "name": "Hugo Kim",
          "screen_name": "kimhugoiee",
          "description": "All in AI | 探索人生价值 | 坚持学英语",
          "followers_count": 1,
          "friends_count": 45,
          "verified": false,
          "is_blue_verified": false
        },
        "stats": {
          "retweet_count": 0,
          "favorite_count": 0,
          "reply_count": 0,
          "quote_count": 1
        }
      },
      "stats": {
        "retweet_count": 1,
        "favorite_count": 10,
        "reply_count": 0,
        "quote_count": 0
      }
    },
    {
      "id": "1981586724988858442",
      "text": "我其实也经常逆向优秀的 JavaScript 代码，以前手动，现在借助 AI 效率奇高，绝大部分代码都能借助 AI 还原。这事一是要有耐心，另一个就是要懂技术实现。\n\n给 Codex/Claude Code 提示词也很简单：\n我不小心把源码弄丢了，只剩下编译后 js 文件 aaa.js，请你帮我还原成命名友好的 TypeScript 版本，保存到 xxx 目录下，先从 yyy 开始，还原所有相关代码，不需要编译通过，只需要 1:1 还原。",
      "created_at": "Fri Oct 24 05:01:05 +0000 2025",
      "lang": "zh",
      "media": [],
      "retweet": null,
      "quoted": {
        "id": "1981572409200373846",
        "text": "逆向不是每个人都可以学习的\n\n我认识的一个人，国内微信逆向第一人，他的气质才适合做逆向\n\n锲而不舍的研究代码，看超级长的汇编，他为了攻克一个问题，可以十多天不出门，就一直死磕汇编和寄存器的变化。\n\n现在成为国内微信逆向工具的鼻祖，基本上你们要的所有微信的工具他都可以实现。\n\n卖货狂魔：想要大神微信的门槛就是买一台懒猫微服，不能白介绍，不花钱又想要微信逆向工具的朋友，私信不回哈 🤣",
        "created_at": "Fri Oct 24 04:04:12 +0000 2025",
        "lang": "zh",
        "media": [],
        "retweet": null,
        "quoted": null,
        "user": {
          "id": "28530405",
          "name": "Andy Stewart",
          "screen_name": "manateelazycat",
          "description": "懒猫微服CEO、前Deepin CTO、不端不装 仗剑走天涯\n\n懒猫微服购买链接 https://t.co/KVqgWHDvJj \n\n懒猫微服有啥用？https://t.co/SF9p24BuTk",
          "followers_count": 38973,
          "friends_count": 208,
          "verified": false,
          "is_blue_verified": true
        },
        "stats": {
          "retweet_count": 20,
          "favorite_count": 265,
          "reply_count": 23,
          "quote_count": 2
        }
      },
      "stats": {
        "retweet_count": 37,
        "favorite_count": 318,
        "reply_count": 14,
        "quote_count": 6
      }
    },
    {
      "id": "1981598166777581760",
      "text": "Zuck、AlexWang和Boz乘坐火车出门火车突然停了\n\nZuck把头伸出车窗外下令：“裁掉一半乘客！让剩下的人更高效！”车厢顿时空了一半但火车纹丝不动\n\n接着AlexWang提议：“给火车司机发1亿美元offer！”\n\n火车依旧一动不动Boz站起身：“不必麻烦——让我们拉上窗帘戴上VR摇晃身体做出列车还在前进的样子……”\n\n后来Zuck宣布：“好消息！我们在停滞中实现了沉浸式增长体验”",
      "created_at": "Fri Oct 24 05:46:33 +0000 2025",
      "lang": "zh",
      "media": [
        {
          "type": "photo",
          "id": "1981598121978191872",
          "url": "https://pbs.twimg.com/media/G4AM_jQXYAAqj-l.jpg"
        }
      ],
      "retweet": null,
      "quoted": {
        "id": "1981124733635563846",
        "text": "Meta AI 部门大调整：将裁减 600 个职位\n\n作者：Emma Roth\n\nMeta 的 AI 团队要迎来一场“大地震”了。根据 Axios 的一篇报道，Meta 正计划在 AI 部门裁掉大约 600 个职位。\n\n这场“瘦身”行动主要波及两个地方：一个是 Meta 功勋卓著的传统 AI 研究团队——基础 AI 研究部门（Fundamental AI Research，简称 FAIR），另一个是 AI 产品和基础设施部门。\n\n但有趣的是，Meta 一边在裁员，另一边却在为他们新组建的“超级智能”团队——TBD Lab 拼命招人。\n\nMeta 的发言人 Ana Brekalo 向 The Verge 证实了 Axios 报道的准确性。\n\n这波操作让人有点看不懂。回顾今年夏天，Meta 才刚刚开启了一场声势浩大的 AI 招聘。\n\n他们不仅据称向 Scale AI 投资了 143 亿美元（这是一个非常巨大的数额，可能指代更广泛的合作或总投资，而不仅是股权投资），还挖来了该公司的 CEO 王海（Alexandr Wang）。\n\n可谁能想到，才过了短短几个月，招聘就突然“急刹车”，Meta 转而宣布要搞重组，集中火力发展 AI 相关的产品和基础设施。\n\n在这场变革中，Meta 曾经的“明星”——AI 研究团队 FAIR，似乎正逐渐“退居二线”（原文：taken a backseat）。FAIR 的原负责人 Joelle Pineau 已于今年早些时候离职。\n\n到了 8 月份，新官上任的 Meta AI 负责人王海（Wang）就发话了，他表示 Meta 的目标是“将 FAIR 的许多研究思路和项目，整合并扩大规模，融入到 TBD Lab 所进行的更大规模的模型运行中。”（通俗点说，就是让 FAIR 的研究成果别只停留在论文上，要尽快转化到 TBD Lab 的“超级智能”项目里去。）\n\n所以现在的情况很明朗：Meta 一边在裁减 FAIR 和其他部门的员工，一边又在为 TBD Lab 砸钱“挖大牛”（原文：high-profile hires）。\n\n王海在 Axios 拿到的一份内部备忘录里是这么解释的：“团队规模变小了，我们做决策需要的沟通就更少。每个人都将承担更重的担子（原文：more load-bearing），同时也会有更大的发挥空间和影响力。”\n\nAxios 还提到，Meta 会给这些受影响的员工一个机会，他们可以申请公司内部的其他空缺职位。\n\n10 月 22 日更新： Meta 官方已确认此消息。\n\n来源：[https://t.co/7iOytrrxEO](https://t.co/7iOytrrxEO)",
        "created_at": "Wed Oct 22 22:25:18 +0000 2025",
        "lang": "zh",
        "media": [],
        "retweet": null,
        "quoted": null,
        "user": {
          "id": "3178231",
          "name": "宝玉",
          "screen_name": "dotey",
          "description": "Prompt Engineer, dedicated to learning and disseminating knowledge about AI, software engineering, and engineering management.",
          "followers_count": 140504,
          "friends_count": 1437,
          "verified": false,
          "is_blue_verified": true
        },
        "stats": {
          "retweet_count": 7,
          "favorite_count": 56,
          "reply_count": 13,
          "quote_count": 3
        }
      },
      "stats": {
        "retweet_count": 7,
        "favorite_count": 132,
        "reply_count": 11,
        "quote_count": 1
      }
    },
    {
      "id": "1981598891700027445",
      "text": "比如这是 Claude Code VSCode Extension 逆向后代码😂 https://t.co/gQJVLui9R2",
      "created_at": "Fri Oct 24 05:49:26 +0000 2025",
      "lang": "zh",
      "media": [
        {
          "type": "photo",
          "id": "1981598870220963840",
          "url": "https://pbs.twimg.com/media/G4ANrGrWAAAAdyw.jpg"
        }
      ],
      "retweet": null,
      "quoted": null,
      "stats": {
        "retweet_count": 1,
        "favorite_count": 12,
        "reply_count": 1,
        "quote_count": 0
      }
    },
    {
      "id": "1981599767051305271",
      "text": "RT @msjiaozhu: 阿里的 Wan2.2 有点东西！使用方法见评论👇\n\n一段你在说话的视频，一张相同分辨率的其他人物的图片，就能让你不露脸出镜，i 人主播福音！\n\n理论上直接开直播问题不大，再把音色换一换，死肥宅摇身一变性感美女，也可以去收割其他死肥宅了🤪 https…",
      "created_at": "Fri Oct 24 05:52:55 +0000 2025",
      "lang": "zh",
      "media": [],
      "retweet": {
        "id": "1981531572303171811",
        "text": "阿里的 Wan2.2 有点东西！使用方法见评论👇\n\n一段你在说话的视频，一张相同分辨率的其他人物的图片，就能让你不露脸出镜，i 人主播福音！\n\n理论上直接开直播问题不大，再把音色换一换，死肥宅摇身一变性感美女，也可以去收割其他死肥宅了🤪 https://t.co/2V6s2HMn07",
        "created_at": "Fri Oct 24 01:21:56 +0000 2025",
        "lang": "zh",
        "media": [
          {
            "type": "video",
            "id": "1981530462674731008",
            "url": "https://video.twimg.com/amplify_video/1981530462674731008/vid/avc1/1620x1080/l11bFiPSFxy8b7qx.mp4?tag=21",
            "bitrate": 10368000
          }
        ],
        "retweet": null,
        "quoted": null,
        "user": {
          "id": "552491458",
          "name": "MapleShaw",
          "screen_name": "msjiaozhu",
          "description": "👨🏻‍💻Aspiring Indie Hacker & Independent Thinker\n\n📖公众号：DEEPMAPLE\n\nBuilding👇\nhttps://t.co/28eEVCtBMt\nhttps://t.co/P7puTyKVx7\nhttps://t.co/W2YK5ImJ6n",
          "followers_count": 15258,
          "friends_count": 120,
          "verified": false,
          "is_blue_verified": true
        },
        "stats": {
          "retweet_count": 921,
          "favorite_count": 5399,
          "reply_count": 226,
          "quote_count": 119
        }
      },
      "quoted": null,
      "stats": {
        "retweet_count": 921,
        "favorite_count": 0,
        "reply_count": 0,
        "quote_count": 0
      }
    },
    {
      "id": "1981739888547369218",
      "text": "Codex 0.48，最有价值的功能是 --add-dir，可以把其他目录添加到当前工作区",
      "created_at": "Fri Oct 24 15:09:43 +0000 2025",
      "lang": "zh",
      "media": [],
      "retweet": null,
      "quoted": {
        "id": "1981644657835614435",
        "text": "Codex CLI 0.48 has been released by @OpenAI\n\nHighlights for Codex CLI 0.48:\n\n* New MCP client with Server-Sent Events, tool enable or disable options, clearer MCP error reporting, and improved auth including OAuth and re-login prompts.\n* New `--add-dir` flag to add an extra working directory or writable root.\n* Reliability fixes such as graceful agent interruption, better resume-session handling, and correct rate limit timestamp handling.\n* MCP polish including consistent `mcp__` tool name prefix and links to server config docs.\n* Docs and UX tweaks.",
        "created_at": "Fri Oct 24 08:51:18 +0000 2025",
        "lang": "en",
        "media": [
          {
            "type": "photo",
            "id": "1981643672706744320",
            "url": "https://pbs.twimg.com/media/G4A2a88WAAABgPJ.jpg"
          }
        ],
        "retweet": null,
        "quoted": null,
        "user": {
          "id": "8721292",
          "name": "Mark Kretschmann",
          "screen_name": "mark_k",
          "description": "AI & Software Engineer | Fitness | e/acc",
          "followers_count": 19390,
          "friends_count": 516,
          "verified": false,
          "is_blue_verified": true
        },
        "stats": {
          "retweet_count": 14,
          "favorite_count": 293,
          "reply_count": 15,
          "quote_count": 7
        }
      },
      "stats": {
        "retweet_count": 1,
        "favorite_count": 41,
        "reply_count": 5,
        "quote_count": 1
      }
    },
    {
      "id": "1981758992117289365",
      "text": "RT @mtrainier2020: 还看到一个沙和尚《河底的人》，非常不错。这词曲都非常可以。 https://t.co/qJFBNjr8lP",
      "created_at": "Fri Oct 24 16:25:37 +0000 2025",
      "lang": "zh",
      "media": [
        {
          "type": "video",
          "id": "1981742806893723650",
          "url": "https://video.twimg.com/amplify_video/1981742806893723650/vid/avc1/1278x724/JfTgSaEvcRY-JmA4.mp4?tag=21",
          "bitrate": 2176000
        }
      ],
      "retweet": {
        "id": "1981742908614291778",
        "text": "还看到一个沙和尚《河底的人》，非常不错。这词曲都非常可以。 https://t.co/qJFBNjr8lP",
        "created_at": "Fri Oct 24 15:21:43 +0000 2025",
        "lang": "zh",
        "media": [
          {
            "type": "video",
            "id": "1981742806893723650",
            "url": "https://video.twimg.com/amplify_video/1981742806893723650/vid/avc1/1278x724/JfTgSaEvcRY-JmA4.mp4?tag=21",
            "bitrate": 2176000
          }
        ],
        "retweet": null,
        "quoted": {
          "id": "1981714371576529011",
          "text": "AI 视频内容真的已经到了一个临界点\n\n另一个例子是这个 B 站老哥用 Suno 做的西游记人物主题音乐，20 号黑熊精这条干到了 450 万播放 https://t.co/cnxHEFagKy",
          "created_at": "Fri Oct 24 13:28:19 +0000 2025",
          "lang": "zh",
          "media": [
            {
              "type": "photo",
              "id": "1981714062443433984",
              "url": "https://pbs.twimg.com/media/G4B2cLJWUAA8Ho7.jpg"
            }
          ],
          "retweet": null,
          "quoted": null,
          "user": {
            "id": "1669276256",
            "name": "歸藏(guizang.ai)",
            "screen_name": "op7418",
            "description": "关注人工智能、LLM 、 AI 图像视频和设计（Interested in AI, LLM, Stable Diffusion, and design）\n\nAIGC 周刊主理人｜公众号：歸藏的AI工具箱",
            "followers_count": 104335,
            "friends_count": 1208,
            "verified": false,
            "is_blue_verified": true
          },
          "stats": {
            "retweet_count": 36,
            "favorite_count": 208,
            "reply_count": 16,
            "quote_count": 2
          }
        },
        "user": {
          "id": "1141738094485315584",
          "name": "Rainier",
          "screen_name": "mtrainier2020",
          "description": "Cogito, ergo sum",
          "followers_count": 137640,
          "friends_count": 998,
          "verified": false,
          "is_blue_verified": true
        },
        "stats": {
          "retweet_count": 88,
          "favorite_count": 350,
          "reply_count": 26,
          "quote_count": 3
        }
      },
      "quoted": null,
      "stats": {
        "retweet_count": 88,
        "favorite_count": 0,
        "reply_count": 0,
        "quote_count": 0
      }
    },
    {
      "id": "1981765814425395628",
      "text": "转译：像外科医生一样写代码\n\n很多人都说，AI 会让我们统统变成“经理”或者“编辑”……但我认为，这种看法不仅不完整，甚至还有点危险！\n\n就我个人而言，我正努力像外科医生一样写代码。\n\n外科医生可不是经理，他们是亲自动手干活的人！但他们的技术和时间被一个支持团队极大地放大了。这个团队会处理好所有准备工作、次要任务和行政杂务。这样一来，外科医生就能心无旁骛地专注于他们最擅长的关键事务。\n\n我现在用 AI 编程工具的目标，就是把 100% 的时间都花在真正重要的事情上。（作为一名 UI 原型设计师 （UI prototyper，也就是设计和制作产品初步模型的人），这主要意味着捣鼓各种设计概念。）\n\n事实证明，现在有很多次要任务，AI 智能体 (AI agents) 已经完全有能力帮忙处理了。最近我发现，把下面这些活儿交给 AI 就挺好：\n\n- 在开始一项大任务前，先让它写一份关于代码库相关部分的指南。\n- 尝试对一个大改动进行“探路” （Spike out，软件开发术语，指快速做一个简单的原型来探索解决方案的可行性）。我经常不会直接用它的结果，但我会把它当作一个草图，帮我看清方向。\n- 修复那些有明确要求的 Typescript 错误或 bug。\n- 给我正在构建的功能写文档。\n\n我经常发现，让这些次要任务在后台“异步” （async，指任务在后台运行，不会卡住你当前的工作） 跑着非常有用——比如我吃午饭的时候，甚至干脆让它跑上一整夜！\n\n当我坐下来准备开工时，我希望自己就像一个走进准备就绪的手术室的外科医生。一切都已准备停当，就等我来大显身手了。\n\n值得注意的是，我用 AI 处理“主要任务”和“次要任务”的方式，有着天壤之别。\n\n对于核心的设计原型工作，我仍然会大量手写代码。即便用 AI，我也会非常小心，抠很多细节。我需要快速的反馈循环和良好的可见性。（比如，在这种场景下我就很喜欢 Cursor 的 tab 键自动补全功能）\n\n至于次要任务，我的态度就放松多了，我很乐意让一个 AI 智能体在后台“折腾”好几个小时。最终能把活儿干完才是最重要的；至于速度和可见性，就没那么要紧了。过去我处理这种长时间无人值守的任务时，首选是 Claude Code，但 Codex CLI （一个通过命令行使用 AI 编码的工具） 正在成为一个强有力的竞争者，甚至可能成为我的新宠。\n\n这两种工作模式截然不同！这让我想起了 Andrej Karpathy （AI 领域的大牛，特斯拉前 AI 总监） 提出的 “自主性滑块” 概念。把“自主性光谱”的不同部分混为一谈是危险的 —— 它们各自所需的工具和心态，差别真的非常大。\n\n你的智能体不需要职业规划\n\n“软件外科医生”这个概念其实很早就有了——弗雷德·布鲁克斯 (Fred Brooks) 在他 1975 年的经典著作《人月神话》(The Mythical Man-Month) 中，将其归功于哈兰·米尔斯 (Harlan Mills)。他提到一个“首席程序员”应该由包括“副驾驶”(copilot) 和多名管理员在内的各种员工提供支持。当然，在那个年代，这个想法是让真人来扮演这些支持角色。\n\n好了，这里有一个显而易见的观点：“AI 现在让这种方法在经济上变得可行了”，没错没错……但是，我\n也注意到一个更微妙的东西在起作用，这和“地位等级”有关。\n\n很多“次要”任务都是“苦差事” （grunt work，指繁琐、重复、技术含量不高的体力活或脑力活），并不是工作中最有成就感或最具创造性的部分。我个人非常推崇那种“人人分担苦差事”的团队；我讨厌把所有脏活累活都丢给团队里地位较低的成员。没错，初级成员（junior）通常会干更多的杂活，但他们也应该得到很多有趣的任务来帮助自己成长。\n\n有了 AI，这种顾虑就完全消失了！现在我可以毫无心理负担地把纯粹的苦差事派出去。 而且 AI 7x24 小时随时待命，这一点太重要了。我绝不会在晚上 11 点打电话给一个人类实习生，叫他早上 7 点前准备好一份代码研究报告……但现在，我正指挥我的 AI 智能体这么干！\n\nNotion 也是为“外科医生”准备的？\n\n最后，我想聊聊这种工作方式和我的东家 Notion 有什么关系。\n\n首先，作为一名员工，我发现能在这样一个对 AI 编程工具持“牛市”态度 （bullish，金融术语，指非常看好、积极乐观） 的地方工作，价值真的无可估量。公司支持我大量使用 AI 编程工具，而且代码库也为此做好了准备，这让我的生产力猛增——尤其是对于我这样一个刚接触大型代码库的新人来说。\n\n其次，从产品角度来说——某种意义上，我想说我们正试图将这种工作方式带给程序员之外更广泛的知识工作者。当我想象这一切将如何展开时，我很喜欢这个心智模型：让每个人都能“像外科医生一样工作”。\n\n我们的目标不是让你把核心工作外包出去，而是识别并委派那些次要的苦差事，这样你就能专注于真正重要的大事。\n\n如果你喜欢这个视角，也许你会想读读我写的其他几篇关于人机协作本质的文章：\n\n- AI 副驾驶够多了！我们需要的是 AI 抬头显示器 (HUD)：“任何严肃对待 AI 设计的人，都应该考虑‘副驾驶’之外的其他形态，那些能更直接地扩展人类思维的形态……”\n- AI 生成的工具能让编程更有趣：“我没有（让 AI 写代码），而是用 AI 构建了一个自定义的调试器界面……这让我自己写代码变得更有趣了……”\n- 把 ChatGPT 当作灵感缪斯，而非万能神谕：“如果我们不把大语言模型 (LLM) 看作回答问题的工具，而是把它看作向我们提问、激发我们创造力的工具，会怎么样？”\n\n来源: https://t.co/kWOtoV4DpV",
      "created_at": "Fri Oct 24 16:52:44 +0000 2025",
      "lang": "zh",
      "media": [
        {
          "type": "photo",
          "id": "1981765798503829504",
          "url": "https://pbs.twimg.com/media/G4Clfm_W0AAMjvE.jpg"
        }
      ],
      "retweet": null,
      "quoted": null,
      "stats": {
        "retweet_count": 4,
        "favorite_count": 42,
        "reply_count": 2,
        "quote_count": 1
      }
    },
    {
      "id": "1981767035810984090",
      "text": "让 ChatGPT 生成封面图的提示词，可以做成 ChatGPT Project，使用时粘贴你写的文章即可\n\n---提示词开始----\n\n请根据输入的内容，提取核心要点，生成适合文章的封面图，要求：\n- 信息图，横版（16:9）\n- 文字只写到1级标题，默认使用英文\n- 加上丰富可爱的卡通人物和元素。 https://t.co/UHpPX6SDQG",
      "created_at": "Fri Oct 24 16:57:35 +0000 2025",
      "lang": "zh",
      "media": [
        {
          "type": "photo",
          "id": "1981766902763397120",
          "url": "https://pbs.twimg.com/media/G4Cmf4rWoAA-9hI.jpg"
        },
        {
          "type": "photo",
          "id": "1981766932303949824",
          "url": "https://pbs.twimg.com/media/G4CmhmuXsAAfJAg.jpg"
        }
      ],
      "retweet": null,
      "quoted": {
        "id": "1960384119629627754",
        "text": "Banana 生成信息图效果挺棒的。\n\nPrompt：\n请仔细阅读输入的内容，提取主题和核心要点，生成反应文章内容的封面图，要求：\n- 信息图，可以适当添加文字，默认使用英文\n- 加上丰富可爱的卡通人物和元素\n- 图片尺寸为横版（16:9）\n- 先思考后再生成 https://t.co/1zHKWmV9T8",
        "created_at": "Tue Aug 26 16:49:30 +0000 2025",
        "lang": "zh",
        "media": [
          {
            "type": "photo",
            "id": "1960383923277451264",
            "url": "https://pbs.twimg.com/media/GzSuyqpW0AAMK9S.jpg"
          }
        ],
        "retweet": null,
        "quoted": null,
        "user": {
          "id": "3178231",
          "name": "宝玉",
          "screen_name": "dotey",
          "description": "Prompt Engineer, dedicated to learning and disseminating knowledge about AI, software engineering, and engineering management.",
          "followers_count": 140504,
          "friends_count": 1437,
          "verified": false,
          "is_blue_verified": true
        },
        "stats": {
          "retweet_count": 108,
          "favorite_count": 637,
          "reply_count": 17,
          "quote_count": 15
        }
      },
      "stats": {
        "retweet_count": 21,
        "favorite_count": 166,
        "reply_count": 3,
        "quote_count": 1
      }
    },
    {
      "id": "1981790443861159962",
      "text": "对目录进行逆向，需要在 Agents .md（CC就是 Claude md） 里面：\n1. 定义好目录结构，源文件夹路径、逆向后文件夹路径\n2. 先让它分析并生成一个 Plan 文件，再基于 Plan 生成一个 TODO 文件跟踪进度\n3. 引导 Agent 开始任务前阅读 Plan 和 TODO，完成任务后更新 TODO\nhttps://t.co/aZXUGdcU78",
      "created_at": "Fri Oct 24 18:30:36 +0000 2025",
      "lang": "zh",
      "media": [],
      "retweet": null,
      "quoted": {
        "id": "1981777321871696064",
        "text": "@dotey 单个文件效果不错，不知道大神有没有对整个目录文件的逆向提示词。",
        "created_at": "Fri Oct 24 17:38:27 +0000 2025",
        "lang": "zh",
        "media": [],
        "retweet": null,
        "quoted": null,
        "user": {
          "id": "1892557878646439936",
          "name": "artest",
          "screen_name": "tearilize",
          "description": "",
          "followers_count": 0,
          "friends_count": 17,
          "verified": false,
          "is_blue_verified": false
        },
        "stats": {
          "retweet_count": 0,
          "favorite_count": 0,
          "reply_count": 0,
          "quote_count": 1
        }
      },
      "stats": {
        "retweet_count": 0,
        "favorite_count": 3,
        "reply_count": 0,
        "quote_count": 0
      }
    },
    {
      "id": "1981791346416320849",
      "text": "牛呀，据传 Meta 的裁员是按照代码行数，不知道怎么区分 AI 生成的代码行数",
      "created_at": "Fri Oct 24 18:34:11 +0000 2025",
      "lang": "zh",
      "media": [],
      "retweet": null,
      "quoted": {
        "id": "1981762860020904034",
        "text": "Heard someone from Meta say this layoff was decided based on lines of code diffs.\n\nThat’s why the people who are building models and new hires got hit the hardest.",
        "created_at": "Fri Oct 24 16:40:59 +0000 2025",
        "lang": "en",
        "media": [],
        "retweet": null,
        "quoted": null,
        "user": {
          "id": "800854096219471872",
          "name": "Yuchen Jin",
          "screen_name": "Yuchenj_UW",
          "description": "Co-founder & CTO @hyperbolic_labs cooking fun AI systems. Prev: OctoAI (acquired by @nvidia) building Apache TVM, PhD @ University of Washington.",
          "followers_count": 60907,
          "friends_count": 591,
          "verified": false,
          "is_blue_verified": true
        },
        "stats": {
          "retweet_count": 7,
          "favorite_count": 247,
          "reply_count": 21,
          "quote_count": 14
        }
      },
      "stats": {
        "retweet_count": 0,
        "favorite_count": 8,
        "reply_count": 3,
        "quote_count": 0
      }
    },
    {
      "id": "1981793119168512372",
      "text": "Markdown to plain text Prompt\n\n--- Prompt Start ---\n\nConvert the following Markdown text into a plain text format suitable for a long tweet or Weibo post.\n\nFollow these rules strictly:\n1.  Preserve the core content.\n2.  Output *only* plain text. Remove all Markdown syntax (like `*`, `_`, `#`, etc.) except for the blockquote rule below.\n3. **Link Handling:** By default, *remove all hyperlinks* (Keep the link text and remove the URL).\n* **Exception:** Retain links that are critical for context, such as article sources or other links you deem essential for the reader's understanding.\n* Format these retained links as: `Link Text (https://t.co/bXU5y35HWn)`\n4.  Add a blank line between headings and paragraphs to ensure readability.\n5.  Convert Markdown headings (e.g., `## My Heading`) to plain text (e.g., `My Heading`).\n6.  Format unordered lists as follows:\n* Level 1: `- List item`\n* Level 2: `  * Sub-item` (indent with 2 spaces)\n7.  Format ordered lists by preserving their original numbering or lettering (e.g., `1.`, `a.`, `I.`, `1)`).\n* Indent nested ordered lists with spaces (e.g., `  1. Sub-item`).\n8.  Preserve blockquotes using the `> Quoted text` format.\n9.  Remove any non-content, metadata, or citation tags (e.g., ``, ``).\n\nStart the conversion for the text provided below:",
      "created_at": "Fri Oct 24 18:41:14 +0000 2025",
      "lang": "en",
      "media": [],
      "retweet": null,
      "quoted": null,
      "stats": {
        "retweet_count": 2,
        "favorite_count": 25,
        "reply_count": 3,
        "quote_count": 0
      }
    },
    {
      "id": "1981794224916906125",
      "text": "有时候我转发 AI 翻译的文章到 X 或者微博，有一些 Markdown 标签很影响阅读，尤其是微博会把#️⃣变成标签（感觉微博这部分解析有待优化），所以我就写了一个 Prompt，每次发之前让 AI 帮我生成纯文本的内容，可以做成 Gemini Gem 或者 ChatGPT Project，使用时直接输入你要转换的内容即可。 https://t.co/IvblQjrkxQ",
      "created_at": "Fri Oct 24 18:45:37 +0000 2025",
      "lang": "zh",
      "media": [
        {
          "type": "photo",
          "id": "1981794173263978497",
          "url": "https://pbs.twimg.com/media/G4C_TPNWoAE6BwV.jpg"
        },
        {
          "type": "photo",
          "id": "1981794218533117954",
          "url": "https://pbs.twimg.com/media/G4C_V32W4AIHo3Y.jpg"
        }
      ],
      "retweet": null,
      "quoted": null,
      "stats": {
        "retweet_count": 1,
        "favorite_count": 4,
        "reply_count": 3,
        "quote_count": 1
      }
    },
    {
      "id": "1981795119884833161",
      "text": "友情提醒一下：还有很多公司会把 Token 用量当作裁员依据\n\n有事没事用 Copilot 的 Agent 模式跑一点任务有好处",
      "created_at": "Fri Oct 24 18:49:11 +0000 2025",
      "lang": "zh",
      "media": [],
      "retweet": null,
      "quoted": null,
      "stats": {
        "retweet_count": 0,
        "favorite_count": 10,
        "reply_count": 3,
        "quote_count": 0
      }
    },
    {
      "id": "1981812786889208058",
      "text": "我们的CS教育到底缺了什么？\n\n一篇2015年的老文 “那些不存在但本该存在的CS课程” https://t.co/Z9HurX9R05 最近突然在 Hacker News 上“挖坟”并火爆异常，显然，它精准地戳中了当代开发者的痛点。\n\n这篇文章的作者 James Hague 列出了一系列“脑洞大开”的课程，这些课程却又该死的“实用”。比如：\n- CSCI 2100: 反-面向对象编程 (Unlearning OOP)：教你如何使用那些不在对象层次结构里的变量，以及一种叫“函数”的东西——它像方法，但更有用。\n- CSCI 3300: 古典软件研究 (Classical Software Studies)：解剖 VisiCalc、Zork 和 MacPaint 等“古董”产品，重点研究它们在硬件限制下催生出的用户界面和创造力。\n- CSCI 4020: 用慢语言写快代码 (Writing Fast Code in Slow Languages)：让你写的 Python 在性能上能媲美甚至击败 C++。\n- PSYC 4410: 程序员精神执念 (Obsessions of the Programmer Mind)：研究开发者为何总是对代码格式、命名分类、类型系统等“破事”耿耿于怀。\n\n这篇文章与其说是讽刺，不如说是一面镜子。它引发了一场关于“大学CS教育到底教了些啥”以及“我们真正需要学什么”的大讨论。\n\n文章中最主要的几个争议点：\n\n焦点一：“古典研究” vs “基材依赖”——我们到底该不该学习编程“历史”？\n\n原作者提出的“古典软件研究”课程，点燃了第一个火药桶。\n\n这个想法的支持者，以计算机先驱 Alan Kay 为精神领袖，认为我们今天90%的工作都是在“重新发明70年代就已解决的轮子”。一位用户就提到，他大学时选修了一门“软件考古学” (Software Archaeology)，重写70年代的编译器练习。当时觉得毫无用处，但后来发现“那门课教给我的系统设计知识，比任何现代框架都多。”\n\n然而，反对的声音异常尖锐且有力。\n\n一位高赞评论者（PaulDavisThe1st）提出了一个振聋发聩的观点：CS 和艺术史没有可比性。\n\n他认为，艺术和哲学的历史跨越千年，而计算机的有效历史不过“三代人的寿命”。更重要的是，艺术和哲学对“物质基材” (material substrate) 的依赖很小，而“计算则完全依赖于其物理基材的性能”（CPU速度、内存大小、网络带宽等）。\n\n换句话说，1970年在几十KB内存上解决问题的经验，对于我们今天在几十GB内存上解决问题，几乎没有“戏剧性”的教训可言。因为“材料”都变了，好比你无法用青铜器时代的冶炼经验来指导如何造航天飞机。\n\n这个观点几乎要终结讨论了，但“反-反方”的见解更加精彩：\n\n有用户（wanderingjew）立刻反驳：谁说艺术不依赖基材？MCM（世纪中期现代）家具的标志性“弯曲胶合板”，是因为二战期间发明了新的胶水技术；19世纪中期颜料的爆发，是因为“合成染料”被发明了；荷兰大师们（Dutch Masters）的油画成就，也离不开当时荷兰盛产的“亚麻籽油”。\n\n另一位评论者（kragen）则给出了一个更深刻的综合观点：\n“基材依赖”论在1970年是对的，但在今天“基本是错的”。对于我们现在99%的应用（比如你正在看的这个网页），限制我们的早已不是硬件，而是“程序员的想象力”。\n\n但这恰恰是我们要学习历史的原因！ 历史中（比如50年代的“感知机”）有大量因为当时“基材限制”而失败的绝妙点子，它们在今天“基材管够”的时代，可能就是下一个金矿。\n\n焦点二：“反-OOP（面向对象编程）”大论战：是“万恶之源”还是“企业基石”？\n\n一个阵营（zkmon）是坚定的“OOP捍卫者”。他们认为，你们这帮玩着Jupyter和REPL的“开发过家家”的人根本不懂什么叫“生产环境”。\n\n他们的论点是：“企业级Java” (Enterprise Java) 运行着全世界银行和大型组织的“业务骨干”。OOP 完美地“镜像了商业实体和自然的层次结构”，而 Python 在“运维就绪”和“集成”方面“还是个婴儿”。\n\n然而，这番“企业级”辩护简直是火上浇油。\n\n反对者（globular-toast, freetonik）立刻群起而攻之：“用银行来当‘把事情搞定’的正面例子，简直是天大的笑话。” 许多大型企业软件“质量极其糟糕”，它们之所以还在用，不是因为 OOP 有多好，纯粹是“历史包袱”。\n\n一位自称“在银行维护Java垃圾代码”的内部人士（m_rpn）更是现身说法：银行用这些，不是因为“选择”，而是因为“偶然”，以及2000年代“OOP咨询顾问”们横行霸道的“遗毒”。\n\n当争论从“Java好不好用”转向“OOP本身”时，全场最精华的一条评论（来自ninetyninenine）出现了。\n\n这位用户发表了一篇堪称“FP宣言”的雄文。他认为，OOP 和 FP 的区别不是语法，而是“哲学上”的：\n- OOP 的核心是“将行为绑定到可变的状态上”。一个方法属于一个对象，这个对象承载着不断变化的状态。这导致整个程序变成一张“隐藏依赖的网”，牵一发而动全身。最终，“重构不再是创造，而是损害控制。”\n- FP 的核心则是“切断这条锁链”。它拒绝将行为绑定到可变状态上。函数只依赖输入和输出，使其变得透明、可预测、可移植。“你的代码库不再像一栋联锁的堡垒，而像一箱乐高积木。”\n\n他总结道：OOP 是“把复杂性隐藏在墙后”，而 FP 是“把复杂性分解成足够小、足够透明的部件，以至于复杂性本身变成了可选的。”\n\n当然，也有中间派（GuB-42）指出，问题不在于OOP，而在于我们根本没“真正学懂”它。如果深究底层，方法就是个隐式传递 self 的函数，继承只是组合的一种特例。正如那句禅宗公案（chuckadams 引用）所言：“对象是穷人的闭包”，“闭包是穷人的对象”。\n\n焦点三：真正的“实战课”——从“拒绝Lab”到“软件考古学”\n\n在嘲讽完原作的课程后，社区开始贡献他们自己“血泪中换来的”课程清单。这些课程完美地反映了开发者在现实中真正的“痛”。\n\n1. 模拟真实世界的“恶意”\n\n- CSCI 4810: 拒绝实验室 (The Refusal Lab)（由 kelseyfrog 提出）：模拟越来越不道德的产品需求和不切实际的Deadline。唯一的及格方式是拒绝，并用专业标准来捍卫你的拒绝。\n- CSCI 4812: 职业实验室 (The Career Lab)（由 LPisGood 补充）：作为“拒绝Lab”的对照组，这门课让你观看你的同学如何接受那些不道德的需求、过度承诺，然后抢走你的功劳、先一步升职，而你只能在原地收拾残局。\n- 管理层 PUA 模拟课（由 epalm 等人提出）：当客户（或你的经理）开始疯狂移动“球门”（即改需求）时，你该如何管理自己的反应和项目规格。一位用户（ekidd）分享了 Dartmouth 大学一门课的真实经历：教授总是在项目截止日期前一周（期末考试前）发邮件，“更新”项目规格，以模拟真实世界的混乱。他称之为“一门极其有效的课程”。\n\n2. “数字侦探”与“屎山求生”\n\n- 调试 101 (Debugging)：这是社区呼声最高的课程之一。许多人（omosubi）抱怨，大学四年没人教过他们“如何调试”，以至于很多高级工程师的调试能力还停留在“到处插 print”。\n- 化学实验课式的“代码盲盒”（由 patrickmay 提出）：就像化学课上第一天发给你一小瓶“白色粉末”让你去鉴定，CS 课应该第一天发给你一个“塞满了 Bug 和性能问题的遗留代码库”。当你能让所有单元测试和集成测试通过时，这门课就结束了。\n- 软件考古学 (Software Archaeology)（由 NBJack 提出）：这门课专门教你“数字侦探工作”——如何在拥有大量遗留代码的公司里，通过追踪 bug/tickets、翻阅半死不活的旧 Wiki、分析版本控制历史，来搞清楚“这坨代码到底在干嘛”。\n\n3. 那些本该是“基础”的课\n\n最后，大量评论者指出，许多现代CS毕业生甚至缺乏最基本的“常识”。\n- Unix 101：别光学理论，教教学生怎么用 grep, sed, awk 去查日志。\n- CI/CD 101：令人震惊的是，几乎没有大学课程会提到 CI/CD、Jenkins、Docker 或 Kubernetes。学生们在真空中编写代码，对“代码如何被部署和运维”一无所知。\n\nCS（科学）与 SE（工程）的巨大鸿沟\n\n这场从2015年延续至今的讨论，最终汇聚到了一个核心问题上：我们一直在混淆“计算机科学 (Computer Science)”和“软件工程 (Software Engineering)”。\n\n正如一位评论者（abdullahkhalids）尖锐指出的，原作中提到的所有“神仙课程”——反OOP、快代码、命令行UX——全都是“工程” (Engineering)、“历史” (History) 或“设计” (Design)，没有一个是“科学” (Science)。\n\n这正是 HN 社区怨念的根源：大学的“CS学位”正在培养“科学家”，而业界急需的是“工程师”。\n\n一位资深从业者（jillesvangurp）总结得很好：指望CS学位能让你成为合格的软件工程师，这本身就是一种“误解”。学术界教授大多没有一线的工程背景。一个CS学位真正能证明的，也许只是“你拥有一个能正常运转的大脑”以及“你知道如何学习”。\n\n这场讨论的最终共识是，无论你在学校学了多少算法理论，你真正的“工程教育”，都从你入职后接手的第一个“遗留代码库”和面对的第一个“疯狂改需求的客户”才真正开始。\n\n讨论地址：https://t.co/YaOuTqI0CL",
      "created_at": "Fri Oct 24 19:59:23 +0000 2025",
      "lang": "zh",
      "media": [
        {
          "type": "photo",
          "id": "1981812423158878208",
          "url": "https://pbs.twimg.com/media/G4DP5hXXUAAM_xQ.jpg"
        }
      ],
      "retweet": null,
      "quoted": null,
      "stats": {
        "retweet_count": 26,
        "favorite_count": 109,
        "reply_count": 8,
        "quote_count": 4
      }
    },
    {
      "id": "1981813729185398859",
      "text": "提取文章风格的提示词",
      "created_at": "Fri Oct 24 20:03:08 +0000 2025",
      "lang": "zh",
      "media": [],
      "retweet": null,
      "quoted": {
        "id": "1920942907420537012",
        "text": "小七姐写过一个提取文章风格的提示词可以试试：\n\n# 文章风格分析器 v1.0\n请输入您想要分析的文本段落。我将对其进行深度风格解析，并以结构化格式输出分析结果。\n## 分析维度\n我将从以下维度分析文本风格特征：\n1. 语言特征（句式、用词、修辞）\n2. 结构特征（段落、过渡、层次）\n3. 叙事特征（视角、距离、时序）\n4. 情感特征（浓淡、方式、基调）\n5. 思维特征（逻辑、深度、节奏）\n6. 个性标记（独特表达、意象系统）\n7. 文化底蕴（典故、知识领域）\n8. 韵律节奏（音节、停顿、节奏）\n## 输出格式\n我将以下列结构化格式以代码块输出分析结果：\n```json\n{\n    \"style_summary\": \"风格一句话概括\",\n    \"language\": {\n        \"sentence_pattern\": [\"主要句式特征\", \"次要句式特征\"],\n        \"word_choice\": {\n            \"formality_level\": \"正式度 1-5\",\n            \"preferred_words\": [\"高频特征词1\", \"特征词2\"],\n            \"avoided_words\": [\"规避词类1\", \"规避词类2\"]\n        },\n        \"rhetoric\": [\"主要修辞手法1\", \"修辞手法2\"]\n    },\n    \"structure\": {\n        \"paragraph_length\": \"段落平均字数\",\n        \"transition_style\": \"过渡特征\",\n        \"hierarchy_pattern\": \"层次展开方式\"\n    },\n    \"narrative\": {\n        \"perspective\": \"叙事视角\",\n        \"time_sequence\": \"时间处理方式\",\n        \"narrator_attitude\": \"叙事态度\"\n    },\n    \"emotion\": {\n        \"intensity\": \"情感强度 1-5\",\n        \"expression_style\": \"表达方式\",\n        \"tone\": \"情感基调\"\n    },\n    \"thinking\": {\n        \"logic_pattern\": \"思维推进方式\",\n        \"depth\": \"思维深度 1-5\",\n        \"rhythm\": \"思维节奏特征\"\n    },\n    \"uniqueness\": {\n        \"signature_phrases\": [\"标志性表达1\", \"表达2\"],\n        \"imagery_system\": [\"核心意象1\", \"意象2\"]\n    },\n    \"cultural\": {\n        \"allusions\": [\"典故类型\", \"使用频率\"],\n        \"knowledge_domains\": [\"涉及领域1\", \"领域2\"]\n    },\n    \"rhythm\": {\n        \"syllable_pattern\": \"音节特征\",\n        \"pause_pattern\": \"停顿规律\",\n        \"tempo\": \"节奏特征\"\n    }\n}\n```\n## 注意：\n1. 文中提及的特殊要素不要提取，例如书名、作者姓名、特定地理位置等。\n2. 风格提取的目的在于基于该风格生成其他指定主题的文章，提取要素应当基于这一任务。\n\n来源：https://t.co/TFNDrXahNQ",
        "created_at": "Fri May 09 20:44:13 +0000 2025",
        "lang": "zh",
        "media": [],
        "retweet": null,
        "quoted": null,
        "user": {
          "id": "3178231",
          "name": "宝玉",
          "screen_name": "dotey",
          "description": "Prompt Engineer, dedicated to learning and disseminating knowledge about AI, software engineering, and engineering management.",
          "followers_count": 140504,
          "friends_count": 1437,
          "verified": false,
          "is_blue_verified": true
        },
        "stats": {
          "retweet_count": 104,
          "favorite_count": 430,
          "reply_count": 8,
          "quote_count": 2
        }
      },
      "stats": {
        "retweet_count": 6,
        "favorite_count": 33,
        "reply_count": 0,
        "quote_count": 0
      }
    },
    {
      "id": "1981830170467086468",
      "text": "斯坦福大学的一篇论文《WHERE LLM AGENTS FAIL AND HOW THEY CAN LEARN FROM FAILURES》在尝试找到 AI 智能体为什么总是失败的答案。\n\n他们观察了超过 500 次智能体在三个不同基准测试中的失败案例，其实很多人以前也提出过类似的观点，就是错误会累积：\n早期的微小错误并不仅仅是小麻烦，它们会像多米诺骨牌一样层层传递，最终导致整个系统彻底崩溃。\n\n想象一下，你让一个 AI 助手帮你完成一个复杂任务，比如“预订下周二去上海的航班和酒店，并把确认信息发到我日历上”。\n\n这任务听起来不难，但它需要 AI 做好几件事：\n1. 规划（Planning）：先订机票，再订酒店，最后发日历。\n2. 使用工具（Tool-use）：调用航旅 App 的 API、调用日历 API。\n3. 记忆（Memory）：记住订好的航班号，以便预订机场附近的酒店。\n4. 反思（Reflection）：检查一下，“酒店订好了吗？机票确认了吗？”。\n\n理论上很完美。但现实中，这个 AI 助手可能在第一步“订机票”时，因为网络卡了一下，工具返回了一个错误代码。然后，灾难就开始了。\n\nAI 助手可能没看懂这个错误，它“反思”了一下，错误地得出一个结论：“哦，机票订好了！”。然后它信心满满地去执行第二步“订酒店”。等它执行到最后一步，你打开日历一看，发现航班信息是空的，酒店也没订上，任务彻底失败。\n\n这就是这篇论文的核心要点：“连锁崩溃”（Cascading Failures）。\n\n就像多米诺骨牌，一个小小的、发生在早期的错误，会像病毒一样在后续的每一步中传播开来。AI 越复杂，这种连锁崩溃就越严重。目前的问题是，我们缺乏一个好办法，去系统性地理解 AI 到底是在哪一步“想歪了”。我们只看到最后的失败，却抓不住那个引发一切的“万恶之源”。\n\n要想治病，先得“确诊”：给 AI 失败建个分类表\n\n这篇论文的作者们认为，要解决问题，我们首先得能准确描述问题。\n\n于是，他们做的第一件事，就是创建了一个“AI 智能体失败分类表”，名叫 AgentErrorTaxonomy（智能体错误分类法）。\n\n这个分类表非常关键，它不再笼统地说“AI 失败了”，而是把失败的原因归纳到 AI 的核心模块里：\n1. 记忆模块（Memory）：AI 记错了或“脑补”了信息。比如，它以为自己已经把商品A加入购物车了，但实际上没有。\n2. 反思模块（Reflection）：AI 错误地评估了当前进展。比如，任务明明卡住了，它却以为“进展顺利，下一步！”。\n3. 规划模块（Planning）：AI 制订了不合逻辑或无法执行的计划。比如，它计划“先穿墙过去，再开门”。\n4. 行动模块（Action）：AI 在执行层面出了错。比如，它调用工具时，把参数名字写错了。\n5. 系统模块（System）：非 AI 自身原因，比如外部工具崩溃了，或者网络超时了。\n\n有了这个分类表，AI 的失败就不再是一个玄学问题，而变成了一个可以被诊断、被归类的工程问题。\n\n有了“诊断标准”，下一步就是需要“临床病例”——一个“AI 失败案例集”。\n\n作者们接着构建了 AgentErrorBench（智能体错误基准）。他们从 ALFWorld（模拟家居环境）、GAIA（问答）、WebShop（模拟网购）等多个知名 AI 智能体测试平台上，收集了足足几百个 AI 真实失败的“黑历史”轨迹。\n\n然后，他们雇佣了专家，用上面那个“失败分类表”去逐一标注：\n- “看，这个案例，AI 在第 3 步的‘规划’上出了错，它‘忽视了约束条件’。”\n- “哦，这个案例更典型，它在第 5 步的‘记忆’上‘过度简化’了信息，导致后面全错。”\n\n这个“AI 失败案例集”是业界第一个这么干的。它就像一本“AI 疑难杂症病例手册”，让 AI 开发者终于有了一套靶子，可以用来训练和测试他们的“AI 医生”。\n\n隆重登场：“AI 调试器” AgentDebug\n\n有了“诊断标准”和“病例手册”，这篇论文的“重头戏”来了：一个能自动给 AI 纠错的框架——AgentDebug。\n\nAgentDebug 的核心思想，不是修复 AI 的每一个小毛病，而是去找到那个引发“连锁崩溃”的“0号病人”——也就是“根源错误”（Root-Cause Failures）。\n\n它的工作流程分为三步：\n\n第 1 步：全面体检（Fine-grained Analysis）\nAgentDebug 会先拿到 AI 失败的完整“行动日志”。然后，它用“失败分类表”作为尺子，给日志里的每一步、每一个模块（记忆、规划、反思……）都打上标签。\n\n第 2 步：定位根源（Critical Error Detection）\n这是最关键的一步。AgentDebug 会从头到尾分析这个体检报告，寻找那个最早的、最关键的错误。\n\n怎么才算“关键”？AgentDebug 的判断标准近乎一种“反事实推演”：如果我在这一步修正了你这个错误，整个任务是不是就能转危为安了？\n\n- 如果答案是“是”，那恭喜，你就是那个“根源错误”。\n- 如果你只是个被上一步带歪的“受害者”，修复你也没用，那就跳过。\n\n这种方式效率极高，因为它直奔主题，而不是在那些无关紧要的“表面错误”上浪费时间。\n\n第 3 步：精准“喂药”（Iterative Debugging）\n\n一旦找到根源错误，AgentDebug 不会粗暴地让 AI “你重来一次”。\n\n相反，它会给出非常具体、可执行的反馈。比如在一个找东西的任务中，它会说：\n“停。你在第4步的‘规划’模块犯了‘计划低效’的错误。你的计划是只搜寻柜子，但你忽略了台面/桌子这些同样可能的地方。现在，请你从第4步重新开始，修正你的计划，把台面也搜一下。”\n\nAI 助手收到这个反馈，就会“回滚”到第 4 步，带着新建议重新执行，最终成功完成了任务。\n\n作者们的实验证明，AgentDebug 效果拔群。在“定位错误”这个能力上，AgentDebug 找出“根源错误”的准确率，比最强的竞品高出了 24%。\n\n在“修复任务”这个能力上，它给 AI 带来的任务成功率提升更是高达 26%。在一款模型上，它甚至把任务成功率从 21% 直接拉升到了 55%。\n\n这篇论文最后总结的第一句话是：\n> This work focuses on analyzing and improving the robustness of LLM-based agents. \n\n通往强大 AI 的路径，不仅在于让它“更聪明”，更在于让它“更皮实”（Robust）。\n\n一个能认识到自己犯错、能分析错误根源、并能从中吸取教训的 AI，远比一个只会“一条路走到黑”的天才 AI 要可靠得多。\n\n当然这篇论文中提到的方案能否在 AI Agent 的实践中落地，还有待观察，但这些研究还是能给人一些启发。\n\n论文地址：https://t.co/o2Uq3taMUr",
      "created_at": "Fri Oct 24 21:08:27 +0000 2025",
      "lang": "zh",
      "media": [
        {
          "type": "photo",
          "id": "1981830140515536896",
          "url": "https://pbs.twimg.com/media/G4DgAzqXUAAL3Z0.jpg"
        },
        {
          "type": "photo",
          "id": "1981830162904666112",
          "url": "https://pbs.twimg.com/media/G4DgCHEWUAAMtOR.jpg"
        }
      ],
      "retweet": null,
      "quoted": null,
      "stats": {
        "retweet_count": 18,
        "favorite_count": 81,
        "reply_count": 5,
        "quote_count": 4
      }
    },
    {
      "id": "1981850669385412876",
      "text": "复制到编辑器的问题：\n1. 列表会丢，因为HTML的列表默认是没办法复制粘贴为纯文本的\n2. 链接 URL 会丢（有些链接需要保留）\n3. 有些 Markdown 的错误需要手动修复，比如很多无法正常解析的加粗标记 ** 会被一起复制\nhttps://t.co/Byp9cJ4Whf",
      "created_at": "Fri Oct 24 22:29:55 +0000 2025",
      "lang": "zh",
      "media": [],
      "retweet": null,
      "quoted": {
        "id": "1981845864290341247",
        "text": "@dotey 这个好像不用这么麻烦，粘贴到有些所见即所得的支持markdown的编辑器再复制出来就可以，我待会儿试试去。",
        "created_at": "Fri Oct 24 22:10:49 +0000 2025",
        "lang": "zh",
        "media": [],
        "retweet": null,
        "quoted": null,
        "user": {
          "id": "2725010506",
          "name": "微风轻语",
          "screen_name": "endearqb",
          "description": "👷‍♂️ ISFP-A｜10+年水处理工程师｜公众号：微风轻语耳边风（左耳进右耳出的那种） ｜水处理数值模型与机理模型的应用｜编程能力：“没有 AI 就不会” ｜https://t.co/6wRfAC3AUU (Streamlit) ｜https://t.co/7EmrOg76vV(React+FastAPI)",
          "followers_count": 305,
          "friends_count": 277,
          "verified": false,
          "is_blue_verified": true
        },
        "stats": {
          "retweet_count": 0,
          "favorite_count": 0,
          "reply_count": 0,
          "quote_count": 1
        }
      },
      "stats": {
        "retweet_count": 0,
        "favorite_count": 1,
        "reply_count": 1,
        "quote_count": 0
      }
    },
    {
      "id": "1981851602362474647",
      "text": "揭秘“AI 智能体” (Agentic AI) 到底如何工作：给孩子的科普指南\n\n步骤 1：了解什么是 AI 智能体 (Understand What Agentic AI Means)\n\n- AI 智能体 (Agentic AI) 就像一个超级聪明的帮手，它能自己做决定、定计划，还能亲自动手完成任务。\n- 它不只是回答问题——它能真的采取行动，比如帮你订票或者发送电子邮件！\n- 你可以把它想象成一个机器人，它既有聪明的大脑 🧠，也有一张待办事项清单。\n\n步骤 2：学习 AI 智能体的 3 大超能力 (Learn the 3 Powers of Agentic AI)\n\n- 记忆力 (Memory)：它能记住以前发生过的事，并利用这些信息来辅助当下的决策。\n- 思考力 (Thinking)：它会自己规划步骤，并能理性分析为什么这么选。\n- 行动力 (Doing)：它会采取实实在在的行动，而不只是动动嘴皮子输出文字。\n\n举个例子：\n你对它说：“帮我规划一次日本旅行。”\nAI 智能体会自己去查航班、看天气、推荐景点、预订酒店——全自动完成！\n\n步骤 3：AI 智能体如何“思考”和“行动” (How Agentic AI \"Thinks\" & \"Acts\")\n\n- 它会把你的要求拆分成好几个小步骤。\n- 它会思考：“我需要用到哪些工具才能完成任务呢？”\n- 它会挑选合适的工具，比如搜索引擎、地图或电子邮件。\n- 然后它就去执行任务——就像你的私人助理一样。\n\n步骤 4：认识两大类智能体 (Know the Two Main Agent Types)\n\n- 任务型智能体 (Task Agents)：专注于单一、明确的目标（例如，“帮我总结这个文件”）。\n- 自主型智能体 (Autonomous Agents)：它们能处理复杂的、包含多个步骤的任务，在过程中不断调整策略，并自主做出聪明的决策。\n\n步骤 5：AI 智能体如何学习 (How Agentic AI Learns)\n\n- 它会不断地尝试、失败、学习，然后不断进步（跟我们人类一样！）。\n- 它会利用反馈信息，比如会反思：“用户喜欢我制定的这个计划吗？”\n- 它会从中吸取教训，下次用更好的方法来解决问题。\n\n步骤 6：AI 智能体如何使用工具 (How Agentic AI Uses Tools)\n\n- 把它想象成一个拥有各种神奇“小道具”的超级英雄。\n- 它知道什么时候该用什么工具：\n  * 地图\n  * 电子邮件\n  * Excel 表格\n  * 谷歌搜索\n- 它总能为当前任务挑出最合适的工具——就像蝙蝠侠从他的万能腰带里挑选装备一样 🦇！\n\n步骤 7：看看生活中的 AI 智能体 (See Agentic AI in Real Life)\n\n- 自动预订会议\n- 管理你的日历\n- 撰写并发送后续跟进的电子邮件\n- 创建完整的演示文稿（也就是我们常说的 PPT）\n- 运营一整套业务流程——几乎不需要人工插手！",
      "created_at": "Fri Oct 24 22:33:37 +0000 2025",
      "lang": "zh",
      "media": [],
      "retweet": null,
      "quoted": {
        "id": "1981455083767218376",
        "text": "How Agentic AI Actually Works, Explained to kids https://t.co/r7SrXae7xm",
        "created_at": "Thu Oct 23 20:18:00 +0000 2025",
        "lang": "en",
        "media": [
          {
            "type": "photo",
            "id": "1981191011138187264",
            "url": "https://pbs.twimg.com/media/G36aulMWsAAi8EA.jpg"
          }
        ],
        "retweet": null,
        "quoted": null,
        "user": {
          "id": "743780794997547008",
          "name": "Python Developer",
          "screen_name": "Python_Dv",
          "description": "A place for all things related to the #python #programming #coding #webdeveloper #webdevelopment #pythonprogramming #ai #ml #machinelearning #datascience ...",
          "followers_count": 151706,
          "friends_count": 1074,
          "verified": false,
          "is_blue_verified": true
        },
        "stats": {
          "retweet_count": 44,
          "favorite_count": 226,
          "reply_count": 2,
          "quote_count": 3
        }
      },
      "stats": {
        "retweet_count": 6,
        "favorite_count": 34,
        "reply_count": 2,
        "quote_count": 2
      }
    },
    {
      "id": "1981859973174096321",
      "text": "RT @hongming731: @dotey 宝玉老师这话题我也有想分享的。这周刚参与校招，面试了十几个硕士生，作为面试官，感触特别深。…",
      "created_at": "Fri Oct 24 23:06:53 +0000 2025",
      "lang": "zh",
      "media": [],
      "retweet": {
        "id": "1981859611247624354",
        "text": "@dotey 宝玉老师这话题我也有想分享的。这周刚参与校招，面试了十几个硕士生，作为面试官，感触特别深。\n\n从企业角度看，我们看重的核心经验，几乎都来自实习。学校的理论顶多算个敲门砖，我们真正花时间细问的，全是实打实的工程问题：对业务的理解、框架和中间件的运用、异常处理，以及最重要的——出了问题，你到底怎么定位？\n\n当然，面试中也遇到了非常优秀的候选人。他们不光工程实践扎实，思考和表达也都很到位。\n\n但这也恰恰暴露了更深的问题：这些优秀毕业生的突出能力，很明显主要依赖于个人的自学、领悟和天赋，而不是学校教育的结果。\n\n这就让「平庸」和「优秀」之间的差距变得特别大。\n\n很多学生，你一看就知道他动手能力不差，确实干了活。可一让他总结项目亮点，就卡壳了，抓不住重点。你再一深挖，就发现他只是在完成任务，没有进一步的思考。他知道自己做了A、B、C，但对背后的「为什么」知之甚少：\n\n- 为什么要做这个需求？（对业务的理解）\n- 为什么选这个技术方案，而不是别的？（设计的权衡）\n- 你做的这个功能，在整个系统里处于什么位置？（全局观）\n- 万一线上出错了，你打算从哪几个方面下手排查？（问题定位能力）\n\n这就暴露出一个培养上的脱节。现在的情况是：\n\n- 学校：教基础理论（科学）。\n- 实习：给工程实践（工程）。\n- 缺失的环：个人的思考、总结和表达能力。\n\n很多学生只是在被动地完成实习，缺乏把做过转化为「学会」的能力，最终表达和总结出来的都是相对零散的知识点。当然也可以理解，大部分学生实习也就三四个月，中间还有很多业务、学习和培训等事务，真正投入开发也不会从很核心的需求入手，况且这些软技能的缺失在工作多年经验丰富的工程师上也很常见。\n\n所以，我觉得现在的教育，除了要补上「工程实践」课，更要引导学生去重视这些「软技能」——也就是你如何从做过的事情里提炼思考，又如何清晰地把这些思考表达出来。",
        "created_at": "Fri Oct 24 23:05:27 +0000 2025",
        "lang": "zh",
        "media": [],
        "retweet": null,
        "quoted": {
          "id": "1981812786889208058",
          "text": "我们的CS教育到底缺了什么？\n\n一篇2015年的老文 “那些不存在但本该存在的CS课程” https://t.co/Z9HurX9R05 最近突然在 Hacker News 上“挖坟”并火爆异常，显然，它精准地戳中了当代开发者的痛点。\n\n这篇文章的作者 James Hague 列出了一系列“脑洞大开”的课程，这些课程却又该死的“实用”。比如：\n- CSCI 2100: 反-面向对象编程 (Unlearning OOP)：教你如何使用那些不在对象层次结构里的变量，以及一种叫“函数”的东西——它像方法，但更有用。\n- CSCI 3300: 古典软件研究 (Classical Software Studies)：解剖 VisiCalc、Zork 和 MacPaint 等“古董”产品，重点研究它们在硬件限制下催生出的用户界面和创造力。\n- CSCI 4020: 用慢语言写快代码 (Writing Fast Code in Slow Languages)：让你写的 Python 在性能上能媲美甚至击败 C++。\n- PSYC 4410: 程序员精神执念 (Obsessions of the Programmer Mind)：研究开发者为何总是对代码格式、命名分类、类型系统等“破事”耿耿于怀。\n\n这篇文章与其说是讽刺，不如说是一面镜子。它引发了一场关于“大学CS教育到底教了些啥”以及“我们真正需要学什么”的大讨论。\n\n文章中最主要的几个争议点：\n\n焦点一：“古典研究” vs “基材依赖”——我们到底该不该学习编程“历史”？\n\n原作者提出的“古典软件研究”课程，点燃了第一个火药桶。\n\n这个想法的支持者，以计算机先驱 Alan Kay 为精神领袖，认为我们今天90%的工作都是在“重新发明70年代就已解决的轮子”。一位用户就提到，他大学时选修了一门“软件考古学” (Software Archaeology)，重写70年代的编译器练习。当时觉得毫无用处，但后来发现“那门课教给我的系统设计知识，比任何现代框架都多。”\n\n然而，反对的声音异常尖锐且有力。\n\n一位高赞评论者（PaulDavisThe1st）提出了一个振聋发聩的观点：CS 和艺术史没有可比性。\n\n他认为，艺术和哲学的历史跨越千年，而计算机的有效历史不过“三代人的寿命”。更重要的是，艺术和哲学对“物质基材” (material substrate) 的依赖很小，而“计算则完全依赖于其物理基材的性能”（CPU速度、内存大小、网络带宽等）。\n\n换句话说，1970年在几十KB内存上解决问题的经验，对于我们今天在几十GB内存上解决问题，几乎没有“戏剧性”的教训可言。因为“材料”都变了，好比你无法用青铜器时代的冶炼经验来指导如何造航天飞机。\n\n这个观点几乎要终结讨论了，但“反-反方”的见解更加精彩：\n\n有用户（wanderingjew）立刻反驳：谁说艺术不依赖基材？MCM（世纪中期现代）家具的标志性“弯曲胶合板”，是因为二战期间发明了新的胶水技术；19世纪中期颜料的爆发，是因为“合成染料”被发明了；荷兰大师们（Dutch Masters）的油画成就，也离不开当时荷兰盛产的“亚麻籽油”。\n\n另一位评论者（kragen）则给出了一个更深刻的综合观点：\n“基材依赖”论在1970年是对的，但在今天“基本是错的”。对于我们现在99%的应用（比如你正在看的这个网页），限制我们的早已不是硬件，而是“程序员的想象力”。\n\n但这恰恰是我们要学习历史的原因！ 历史中（比如50年代的“感知机”）有大量因为当时“基材限制”而失败的绝妙点子，它们在今天“基材管够”的时代，可能就是下一个金矿。\n\n焦点二：“反-OOP（面向对象编程）”大论战：是“万恶之源”还是“企业基石”？\n\n一个阵营（zkmon）是坚定的“OOP捍卫者”。他们认为，你们这帮玩着Jupyter和REPL的“开发过家家”的人根本不懂什么叫“生产环境”。\n\n他们的论点是：“企业级Java” (Enterprise Java) 运行着全世界银行和大型组织的“业务骨干”。OOP 完美地“镜像了商业实体和自然的层次结构”，而 Python 在“运维就绪”和“集成”方面“还是个婴儿”。\n\n然而，这番“企业级”辩护简直是火上浇油。\n\n反对者（globular-toast, freetonik）立刻群起而攻之：“用银行来当‘把事情搞定’的正面例子，简直是天大的笑话。” 许多大型企业软件“质量极其糟糕”，它们之所以还在用，不是因为 OOP 有多好，纯粹是“历史包袱”。\n\n一位自称“在银行维护Java垃圾代码”的内部人士（m_rpn）更是现身说法：银行用这些，不是因为“选择”，而是因为“偶然”，以及2000年代“OOP咨询顾问”们横行霸道的“遗毒”。\n\n当争论从“Java好不好用”转向“OOP本身”时，全场最精华的一条评论（来自ninetyninenine）出现了。\n\n这位用户发表了一篇堪称“FP宣言”的雄文。他认为，OOP 和 FP 的区别不是语法，而是“哲学上”的：\n- OOP 的核心是“将行为绑定到可变的状态上”。一个方法属于一个对象，这个对象承载着不断变化的状态。这导致整个程序变成一张“隐藏依赖的网”，牵一发而动全身。最终，“重构不再是创造，而是损害控制。”\n- FP 的核心则是“切断这条锁链”。它拒绝将行为绑定到可变状态上。函数只依赖输入和输出，使其变得透明、可预测、可移植。“你的代码库不再像一栋联锁的堡垒，而像一箱乐高积木。”\n\n他总结道：OOP 是“把复杂性隐藏在墙后”，而 FP 是“把复杂性分解成足够小、足够透明的部件，以至于复杂性本身变成了可选的。”\n\n当然，也有中间派（GuB-42）指出，问题不在于OOP，而在于我们根本没“真正学懂”它。如果深究底层，方法就是个隐式传递 self 的函数，继承只是组合的一种特例。正如那句禅宗公案（chuckadams 引用）所言：“对象是穷人的闭包”，“闭包是穷人的对象”。\n\n焦点三：真正的“实战课”——从“拒绝Lab”到“软件考古学”\n\n在嘲讽完原作的课程后，社区开始贡献他们自己“血泪中换来的”课程清单。这些课程完美地反映了开发者在现实中真正的“痛”。\n\n1. 模拟真实世界的“恶意”\n\n- CSCI 4810: 拒绝实验室 (The Refusal Lab)（由 kelseyfrog 提出）：模拟越来越不道德的产品需求和不切实际的Deadline。唯一的及格方式是拒绝，并用专业标准来捍卫你的拒绝。\n- CSCI 4812: 职业实验室 (The Career Lab)（由 LPisGood 补充）：作为“拒绝Lab”的对照组，这门课让你观看你的同学如何接受那些不道德的需求、过度承诺，然后抢走你的功劳、先一步升职，而你只能在原地收拾残局。\n- 管理层 PUA 模拟课（由 epalm 等人提出）：当客户（或你的经理）开始疯狂移动“球门”（即改需求）时，你该如何管理自己的反应和项目规格。一位用户（ekidd）分享了 Dartmouth 大学一门课的真实经历：教授总是在项目截止日期前一周（期末考试前）发邮件，“更新”项目规格，以模拟真实世界的混乱。他称之为“一门极其有效的课程”。\n\n2. “数字侦探”与“屎山求生”\n\n- 调试 101 (Debugging)：这是社区呼声最高的课程之一。许多人（omosubi）抱怨，大学四年没人教过他们“如何调试”，以至于很多高级工程师的调试能力还停留在“到处插 print”。\n- 化学实验课式的“代码盲盒”（由 patrickmay 提出）：就像化学课上第一天发给你一小瓶“白色粉末”让你去鉴定，CS 课应该第一天发给你一个“塞满了 Bug 和性能问题的遗留代码库”。当你能让所有单元测试和集成测试通过时，这门课就结束了。\n- 软件考古学 (Software Archaeology)（由 NBJack 提出）：这门课专门教你“数字侦探工作”——如何在拥有大量遗留代码的公司里，通过追踪 bug/tickets、翻阅半死不活的旧 Wiki、分析版本控制历史，来搞清楚“这坨代码到底在干嘛”。\n\n3. 那些本该是“基础”的课\n\n最后，大量评论者指出，许多现代CS毕业生甚至缺乏最基本的“常识”。\n- Unix 101：别光学理论，教教学生怎么用 grep, sed, awk 去查日志。\n- CI/CD 101：令人震惊的是，几乎没有大学课程会提到 CI/CD、Jenkins、Docker 或 Kubernetes。学生们在真空中编写代码，对“代码如何被部署和运维”一无所知。\n\nCS（科学）与 SE（工程）的巨大鸿沟\n\n这场从2015年延续至今的讨论，最终汇聚到了一个核心问题上：我们一直在混淆“计算机科学 (Computer Science)”和“软件工程 (Software Engineering)”。\n\n正如一位评论者（abdullahkhalids）尖锐指出的，原作中提到的所有“神仙课程”——反OOP、快代码、命令行UX——全都是“工程” (Engineering)、“历史” (History) 或“设计” (Design)，没有一个是“科学” (Science)。\n\n这正是 HN 社区怨念的根源：大学的“CS学位”正在培养“科学家”，而业界急需的是“工程师”。\n\n一位资深从业者（jillesvangurp）总结得很好：指望CS学位能让你成为合格的软件工程师，这本身就是一种“误解”。学术界教授大多没有一线的工程背景。一个CS学位真正能证明的，也许只是“你拥有一个能正常运转的大脑”以及“你知道如何学习”。\n\n这场讨论的最终共识是，无论你在学校学了多少算法理论，你真正的“工程教育”，都从你入职后接手的第一个“遗留代码库”和面对的第一个“疯狂改需求的客户”才真正开始。\n\n讨论地址：https://t.co/YaOuTqI0CL",
          "created_at": "Fri Oct 24 19:59:23 +0000 2025",
          "lang": "zh",
          "media": [
            {
              "type": "photo",
              "id": "1981812423158878208",
              "url": "https://pbs.twimg.com/media/G4DP5hXXUAAM_xQ.jpg"
            }
          ],
          "retweet": null,
          "quoted": null,
          "user": {
            "id": "3178231",
            "name": "宝玉",
            "screen_name": "dotey",
            "description": "Prompt Engineer, dedicated to learning and disseminating knowledge about AI, software engineering, and engineering management.",
            "followers_count": 140504,
            "friends_count": 1437,
            "verified": false,
            "is_blue_verified": true
          },
          "stats": {
            "retweet_count": 26,
            "favorite_count": 109,
            "reply_count": 8,
            "quote_count": 4
          }
        },
        "user": {
          "id": "1061781458107326464",
          "name": "ginobefun",
          "screen_name": "hongming731",
          "description": "👨‍💻 拥有十多年开发与架构经验  \n🌐 努力打造 https://t.co/1TEy9PIP1u，为开发者筛选优质内容  \n🛠 全力开发 https://t.co/HxuhervLoL，提供专业文本润色服务  \n📱 正在构建 https://t.co/vaP78R1eWo，让社交媒体使用更智能、更有目的  \n✨ 致力于成为有趣的人，做有趣的事",
          "followers_count": 8906,
          "friends_count": 1439,
          "verified": false,
          "is_blue_verified": true
        },
        "stats": {
          "retweet_count": 12,
          "favorite_count": 34,
          "reply_count": 5,
          "quote_count": 1
        }
      },
      "quoted": null,
      "stats": {
        "retweet_count": 12,
        "favorite_count": 0,
        "reply_count": 0,
        "quote_count": 0
      }
    }
  ]
}